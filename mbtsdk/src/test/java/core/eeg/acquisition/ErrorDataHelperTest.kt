package core.eeg.acquisition

import com.mybraintech.sdk.util.ErrorDataHelper2
import org.junit.Test
import org.junit.jupiter.api.Assertions.assertEquals

/**
 * @see ErrorDataHelper
 */
internal class ErrorDataHelperTest {

    private val channelNb = 4

    private val ZERO: Byte = 0x00

    private val eegInputs = arrayListOf<ByteArray>(
            byteArrayOf(
                    0x01, 0x10, 0x02, 0x20, 0x03, 0x30, 0x04, 0x40,
                    0x01, 0x11, 0x02, 0x21, 0x03, 0x31, 0x04, 0x41,
                    0x01, 0x12, 0x02, 0x22, 0x03, 0x32, 0x04, 0x42,
                    0x01, 0x13, 0x02, 0x23, 0x03, 0x33, 0x04, 0x43,
                    0x01, 0x14, 0x02, 0x24, 0x03, 0x34, 0x04, 0x44
            ),
            byteArrayOf(
                    ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO,
                    0x01, 0x11, 0x02, 0x21, 0x03, 0x31, 0x04, 0x41,
                    0x01, 0x12, 0x02, 0x22, 0x03, 0x32, 0x04, 0x42,
                    0x01, 0x13, 0x02, 0x23, 0x03, 0x33, 0x04, 0x43,
                    0x01, 0x14, 0x02, 0x24, 0x03, 0x34, 0x04, 0x44
            ),
            byteArrayOf(
                    ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO,
                    ZERO, ZERO, 0x02, 0x21, 0x03, 0x31, 0x04, 0x41,
                    0x01, 0x12, ZERO, 0x22, 0x03, 0x32, 0x04, 0x42,
                    0x01, 0x13, 0x02, 0x23, 0x03, 0x33, 0x04, 0x43,
                    0x01, 0x14, 0x02, 0x24, 0x03, 0x34, 0x04, 0x44
            ),
            byteArrayOf(
                    ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO,
                    ZERO, ZERO, 0x02, 0x21, 0x03, 0x31, 0x04, 0x41,
                    0x01, 0x12, ZERO, ZERO, 0x03, 0x32, 0x04, 0x42,
                    0x01, 0x13, 0x02, 0x23, 0x03, 0x33, 0x04, 0x43,
                    0x01, 0x14, 0x02, 0x24, 0x03, 0x34, 0x04, 0x44
            )
    )

    private val expecteds = arrayListOf<Pair<Int, Int>>(
            Pair(0, 0),
            Pair(1, 4),
            Pair(1, 5),
            Pair(1, 6)
    )

    @Test
    fun testCountZeroSample() {
        println("testCountZeroSample")
        for (i in 0 until eegInputs.size) {
            println("input $i")
            val eegInput = eegInputs[i]
            val expected = expecteds[i]
            val result = ErrorDataHelper2.countZeroSample(eegInput, channelNb)
            assertEquals(expected.first, result.first)
            assertEquals(expected.second, result.second)
        }
    }
}