apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'


android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 28

        versionCode 27
        versionName '2.2.16.qplus'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        buildConfigField "boolean", "EEG_ENABLED", "true"
        buildConfigField "boolean", "BLUETOOTH_ENABLED", "true"
        buildConfigField "boolean", "DEVICE_ENABLED", "true"
        buildConfigField "boolean", "RECORDING_ENABLED", "true"
        buildConfigField "String", "FIRMWARE_VERSION", "\"1_7_26\""
        buildConfigField "String", "USE_ALGO_VERSION", "\"2.3.1\""
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            libraryVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "lib_${variant.flavorName}_${variant.buildType.name}_${defaultConfig.versionName}.aar"
                }
            }
        }
        prerelease {
        }
        staging {
        }
        debug {
        }
        unitTests {
        }
    }
    
    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }
    flavorDimensions "package"
    productFlavors {
        full{
            dimension "package"
        }
        lite{
            dimension "package"
        }
    }

    testBuildType "unitTests"

    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }



    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    ndkVersion "21.0.6113669"

}

configurations {
    doclava
}

dependencies {
    compile "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'org.mod4j.org.apache.commons:lang:2.1.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.google.code.gson:gson:2.8.5'
    doclava 'com.google.doclava:doclava:1.0.6'

    // rxjava
    implementation deps.rx_android
    implementation deps.rx_kotlin
    implementation deps.rxjava2

    //test
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.4'
    testImplementation 'org.mockito:mockito-core:2.8.9'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.4'
    testImplementation 'org.greenrobot:eventbus:3.1.1'
    testImplementation 'org.robolectric:robolectric:3.7.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.mockito:mockito-android:2.25.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    //JUnit5 = JUnit Platform + JUnit Jupiter + JUnit Vintage
    testImplementation "org.junit.platform:junit-platform-runner:1.6.2"
    def junitJupiterVersion = '5.6.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation "io.mockk:mockk:1.10.0"
}


project.afterEvaluate {
    publishing {
        publications {
            full(MavenPublication) {
                groupId 'mybraintech.com'
                artifactId 'sdk-full'
                version android.defaultConfig.versionName

                artifact(fullSourcesJar)
                artifact(fullJavadocJar)

                //android.buildTypes.all { buildType ->//Select the library name here
                    def libName = "lib_full_release_${android.defaultConfig.versionName}.aar"
                    artifact("$buildDir/outputs/aar/${libName}")
                //}


                //we can force send to nexus the version we want by changing the aar name
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    // WARNING HERE IS FOR IMPLEMENTATION ONLY. API, COMPILEONLY,... ARE NOT TAKEN INTO ACCOUNT
                    configurations.implementation.allDependencies.each {
                        if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }

            lite(MavenPublication) {
                groupId 'mybraintech.com'
                artifactId 'sdk-lite'
                version android.defaultConfig.versionName

                artifact(liteSourcesJar)
                artifact(liteJavadocJar)

                //android.buildTypes.all { buildType ->//Select the library name here
                    def libName = "lib_lite_release_${android.defaultConfig.versionName}.aar"
                    artifact("$buildDir/outputs/aar/${libName}")
                //}

                //we can force send to nexus the version we want by changing the aar name
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    // WARNING HERE IS FOR IMPLEMENTATION ONLY. API, COMPILEONLY,... ARE NOT TAKEN INTO ACCOUNT
                    configurations.implementation.allDependencies.each {
                        if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
            //Add repository here with publisher credentials
            repositories {
                maven {
                    url nexusUrl
                    credentials {
                        username nexusUsername
                        password nexusPassword
                    }
                }
            }
        }

    }

//Task to generate sources into Jar file
task liteSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
    from (android.sourceSets.lite.java.srcDirs){
        exclude('core')
        exclude('eventbus')
    }
}

task fullSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
    from android.sourceSets.full.java.srcDirs
}

//Task to generate javadoc as html
task liteJavadoc(type: Javadoc) {
    options.charSet = 'UTF-8'
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    source += android.sourceSets.lite.java.sourceFiles

    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task fullJavadoc(type: Javadoc) {
    options.charSet = 'UTF-8'
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    source += android.sourceSets.full.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

//Task to generate javadoc as Jar file from html task
task liteJavadocJar(type: Jar, dependsOn: liteJavadoc) {
    archiveClassifier.set('javadoc')
    from liteJavadoc.destinationDir
}

//Task to generate javadoc as Jar file from html task
task fullJavadocJar(type: Jar, dependsOn: fullJavadoc) {
    archiveClassifier.set('javadoc')
    from fullJavadoc.destinationDir
}

artifacts {
    archives liteSourcesJar
    archives fullSourcesJar

    archives liteJavadocJar
    archives fullJavadocJar

}
repositories {
    mavenCentral()
}
